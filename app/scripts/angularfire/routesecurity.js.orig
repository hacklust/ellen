<<<<<<< HEAD
=======
// thanks that irc for firebase is available when i ask
// https://gist.github.com/mattvv/183e2a4073557b77ecb3 provided what i need in seconds.. lol, faster than so

>>>>>>> development
(function (angular) {
  'use strict';
  angular.module('ellenApp')
    .run(function ($injector, $location, $rootScope, loginRedirectPath) {
<<<<<<< HEAD
      if ($injector.has('$route')) {
        new RouteSecurityManager($location, $rootScope, $injector.get('$route'), loginRedirectPath);
      }
    });

  function RouteSecurityManager($location, $rootScope, $route, path) {
    this._route = $route;
=======
      if ($injector.has('$state')) {
        new RouteSecurityManager($location, $rootScope, $injector.get('$state'), loginRedirectPath);
      }
    });
 
  function RouteSecurityManager($location, $rootScope, $state, path) {
    this._state = $state;
>>>>>>> development
    this._location = $location;
    this._rootScope = $rootScope;
    this._loginPath = path;
    this._redirectTo = null;
    this._authenticated = !!($rootScope.auth && $rootScope.auth.user);
    this._init();
  }
<<<<<<< HEAD

=======
 
>>>>>>> development
  RouteSecurityManager.prototype = {
    _init: function () {
      var self = this;
      this._checkCurrent();
<<<<<<< HEAD

      // Set up a handler for all future route changes, so we can check
      // if authentication is required.
      self._rootScope.$on('$routeChangeStart', function (e, next) {
        self._authRequiredRedirect(next, self._loginPath);
      });

=======
 
      // Set up a handler for all future route changes, so we can check
      // if authentication is required.
      self._rootScope.$on('$stateChangeStart', function (e, next) {
        self._authRequiredRedirect(next, self._loginPath);
      });
 
>>>>>>> development
      self._rootScope.$on('$firebaseSimpleLogin:login', angular.bind(this, this._login));
      self._rootScope.$on('$firebaseSimpleLogin:logout', angular.bind(this, this._logout));
      self._rootScope.$on('$firebaseSimpleLogin:error', angular.bind(this, this._logout));
    },
<<<<<<< HEAD

    _checkCurrent: function () {
      // Check if the current page requires authentication.
      if (this._route.current) {
        this._authRequiredRedirect(this._route.current, this._loginPath);
      }
    },

=======
 
    _checkCurrent: function () {
      // Check if the current page requires authentication.
      if (this._state.current) {
        this._authRequiredRedirect(this._state.current, this._loginPath);
      }
    },
 
>>>>>>> development
    _login: function () {
      this._authenticated = true;
      if (this._redirectTo) {
        this._redirect(this._redirectTo);
        this._redirectTo = null;
      }
      else if (this._location.path() === this._loginPath) {
        this._location.replace();
        this._location.path('/');
      }
    },
<<<<<<< HEAD

=======
 
>>>>>>> development
    _logout: function () {
      this._authenticated = false;
      this._checkCurrent();
    },
<<<<<<< HEAD

=======
 
>>>>>>> development
    _redirect: function (path) {
      this._location.replace();
      this._location.path(path);
    },
<<<<<<< HEAD

    // A function to check whether the current path requires authentication,
    // and if so, whether a redirect to a login page is needed.
    _authRequiredRedirect: function (route, path) {
      if (route.authRequired && !this._authenticated) {
        if (route.pathTo === undefined) {
          this._redirectTo = this._location.path();
        } else {
          this._redirectTo = route.pathTo === path ? '/' : route.pathTo;
=======
 
    // A function to check whether the current path requires authentication,
    // and if so, whether a redirect to a login page is needed.
    _authRequiredRedirect: function (state, path) {
      if (state.authRequired && !this._authenticated) {
        if (state.pathTo === undefined) {
          this._redirectTo = this._location.path();
        } else {
          this._redirectTo = state.pathTo === path ? '/' : state.pathTo;
>>>>>>> development
        }
        this._redirect(path);
      }
      else if (this._authenticated && this._location.path() === this._loginPath) {
        this._redirect('/');
      }
    }
  };
<<<<<<< HEAD
})(angular);
=======
})(angular);
>>>>>>> development
